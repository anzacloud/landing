import { merge } from '@corex/deepmerge';
import { loadFile } from '../file';
export const loadConfig = (path) => {
    const baseConfig = loadFile(path);
    return withDefaultConfig(baseConfig);
};
export const transformSitemap = (config, url) => {
    return {
        loc: url,
        changefreq: config.changefreq,
        priority: config.priority,
        lastmod: config.autoLastmod ? new Date().toISOString() : undefined,
    };
};
export const defaultConfig = {
    sourceDir: '.next',
    outDir: 'public',
    priority: 0.7,
    changefreq: 'daily',
    sitemapSize: 5000,
    autoLastmod: true,
    trailingSlash: false,
    exclude: [],
    transform: transformSitemap,
    robotsTxtOptions: {
        policies: [
            {
                userAgent: '*',
                allow: '/',
            },
        ],
        additionalSitemaps: [],
    },
};
export const updateConfig = (currConfig, newConfig) => {
    return merge([currConfig, newConfig], {
        arrayMergeType: 'overwrite',
    });
};
export const withDefaultConfig = (config) => {
    return updateConfig(defaultConfig, config);
};
export const getRuntimeConfig = (runtimePaths) => {
    const exportMarkerConfig = loadFile(runtimePaths.EXPORT_MARKER, false);
    return {
        trailingSlash: exportMarkerConfig
            ? exportMarkerConfig.exportTrailingSlash
            : undefined,
    };
};
