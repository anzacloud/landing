"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint-disable @typescript-eslint/no-non-null-assertion */
const config_1 = require("./config");
const manifest_1 = require("./manifest");
const url_1 = require("./url");
const sitemap_1 = require("./sitemap");
const array_1 = require("./array");
const path_1 = require("./path");
const robots_txt_1 = require("./robots-txt");
// Get config file path
const configFilePath = path_1.getConfigFilePath();
// Load next-sitemap.js
let config = config_1.loadConfig(configFilePath);
// Get runtime paths
const runtimePaths = path_1.getRuntimePaths(config);
// get runtime config
const runtimeConfig = config_1.getRuntimeConfig(runtimePaths);
// Update config with runtime config
config = config_1.updateConfig(config, runtimeConfig);
// Load next.js manifest files
const manifest = manifest_1.loadManifest(runtimePaths);
// Create url-set based on config and manifest
const urlSet = url_1.createUrlSet(config, manifest);
// Split sitemap into multiple files
const chunks = array_1.toChunks(urlSet, config.sitemapSize);
const sitemapChunks = path_1.resolveSitemapChunks(runtimePaths.SITEMAP_FILE, chunks);
// All sitemaps array to keep track of generated sitemap files.
// Later to be added on robots.txt
const allSitemaps = [];
// Generate sitemaps from chunks
sitemapChunks.forEach((chunk) => {
    sitemap_1.generateSitemap(config, chunk.path, chunk.fields);
    allSitemaps.push(url_1.generateUrl(config.siteUrl, `/${chunk.filename}`));
});
// Generate robots.txt
if (config.generateRobotsTxt) {
    robots_txt_1.exportRobotsTxt(runtimePaths, config, allSitemaps);
}
